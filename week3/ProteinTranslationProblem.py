
gencode = {
    "UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
    "UCU":"S", "UCC":"S", "UCA":"S", "UCG":"S",
    "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
    "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
    "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
    "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
    "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
    "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
    "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
    "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
    "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
    "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
    "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
    "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
    "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
    "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G"
    }

base2base = {
    "A":"T", "C":"G", "G":"C", "T":"A"
    }

def ProteinTranslation(rna): # Translate RNA sequence to the respective protein
    n = len(rna)
    protein = ""
    
    for i in range(0, n, 3):
        codon = rna[i:i + 3]
        amino = gencode[codon]
        if amino != "STOP":
            protein += amino
        else:
            break
        
    return protein

def Reverse(dna): #return reverse compliment of dna
    rev = ""
    for base in dna:
        rev += base2base[base]
        
    return rev[::-1]

def RNA_poly(dna): #return transcripted rna string
    rna = ""
    
    for base in dna:
        if base == "T":
            rna += "U"
        else:
            rna += base
    
    return rna

def PeptideEncoding(pattern, peptide):
    reverse = Reverse(pattern)
    #Get RNA
    rna = RNA_poly(pattern)
    rna_rev = RNA_poly(reverse)
    
    results = []
    k = len(peptide) * 3
    N = len(rna) - k + 1
    
    for i in range(N):
        candidate1 = rna[i: i + k]
        candidate2 = rna_rev[-(i + k):-i]
        
        if ProteinTranslation(candidate1) == peptide or ProteinTranslation(candidate2) == peptide:
            results.append(pattern[i:i + k])
        
    
    return results

  
if __name__ == "__main__":
    
    '''rna = ""
    f = open("test.txt", "r").readlines()
    for char in f:
        rna += char
    file = open("answer.txt", "w")  
    print(rna)
    file.write(ProteinTranslation(rna[:-1]))
    file.close()
'''
    #pattern = "ACCGCGCCGGCGTGTGCCCGAAGGATGAGGACTGGCTAATTCGTTTCCTAACAAAACGAATCTCTCGAGGAGAAAACGATCACTGGGTCTTTGGGCCGTGCCGGGGTGTCTTCTCGCAGTCTGAGATTCGTGATCGGACACTGTAGGAATCTAATTAGCCAATCCTCATCCTTTATCGCCGGGGAGATCGATGAACTGGTATACTCCCTGAAAGGATGAGGACTGGCTCATCCGCTTTTTGAATTGGTCGTCGGTAACAACGGCTTACGCATTTGACATCCGTGTATAGAGCGCGCAGGAAACGGATTAACCAATCTTCATCTTTTCGAAAAGACCCTTTGGCTGATGGGCACGGTTTATACGAAAGACGAAGATTGGTTAATTCGATTTCTCTCTCTTTAACCTCTTCTTTACGGTACACTCGTCGTGTTACATTTCGTCCACTGTAGCGATTGCTGTCAAAAGAGGGAAGAATACTTGCACTTGGGCAACCCGTCACTTCATTACCGGACGCGAAAATTATCATCCGTGTTAACATACGTTAACGCACGAATTGCTCTGTAGCATTCAATGCAGCTCAGGAATCCTAGGAAGGACCCCCCGTGGGCATATTTCCTGACCTGCGGATGGTGACGAGACCTCATTGCCAGTTTAGCGGCCGCCACTCCTTCGTCACATATTCTTGGAGCAGTATAGCAAAGTCACTGGCGTCCGCCGACTGCGCGTGCCGCGGTGTCACACTATTCGTCCCCCGCGTGTGCTCTATTGTGGTTGTCTCATAGCAAGCGCCTTGGTTCTGTAGTGGGCGCAAGTTGTGGAGATCACGCAAGCTCATAAGGCCAGCCCTTGTCAACGTGCACATGTGATGACTAGGATTAGGCAATAGGGAATGAACTCTGTTCTGGTGTCCTACCTTCCAATAAACTCCCGCATCTCTTATTCGCGTTCAGCAACCTTCCTCAAGTCAGACGACCCATCAATTTCACAAGTACCTCAGGAGCATTTAAAAGATGAGGATTGGCTTATTAGGTTCCTAACGATCCCCGGGGGTTTCATCCCCATGCTGGAGGGAGGCATATGGCGGGACAGAATACGTGTGACCTCGTACCGGCCTTAGCTGATCTTTGTTCCCAGGCTCCATTATATCGCCGACGCGCGCATCGTAACTTTCGGCTATGTGAGCGGTAATCAACCTGCAATGCTAGTTAACTGATACGCTAAGTGCGCGTATTCGGAGGCGCCACTTACCGGGACGGCGTTATGCTACAGCTCTAGAGTCATGCCAAATGATGGCACCAACAACAACCGTCCGCATCGCTGGCAAGTGAGGTGTTTGCAGATGGTCCGTCGTAGCCCGTGCAGAATCTCGTCCCTTACACGGGGAACAGAGGACATACACCTTAGTGAGACCCCCCTACGGTCCTACGCATCTACCGCACCCTCGTTCAGAGCATTTATTATGAGAAGGTCGTCCAGCCCACTCGCCGCGCACCAATAGGCGACGAAGCGGTCGCCAGTTCTGGCGTCATTACGGATCAGCAAGAGAGCCGCGACGGCTAATACATGTTCGGTATATACAGAATGTTCAGAAGGGACCAGGATAGTGCCACCTCGAGCGACCAGTGCTTACACGGCGTCGCAGATAAATTGGCTCAGGGGCTAAAAAACCCGAACAGTTAGTAATGGCAAGGAGTGACCCTTTAACCCCATGCTGGTCAAAGTTCTTCATTATACTGGCATCATGACGGTGCGGCAAACGGACACATAGCGTAATTTTTAAGGCTGCACAGTAATGATCTGTAGGGGCTTGTTCGAAGAGCCCCACAACAGCACGAGTTTTCTGGCATCACAAATGTTATATGTTCAACCGAAAGATGAGGACTGGCTCATCAGGTTTCTCTTTCGCAGGGCGCAACCTCGACACGACCATTTGAATTAGTGGTCCAAGTCACGCAACTCTAGACACTGGGGCATAGCGACGCAGTATCGTCCCGCCATACGTTTCTCCTAGAGTGGACCATAATAGAGCTGCTCCCCTAGTGAAAGGGCTGTTCTATCGGCTCCTGAGCTAGACGCCCCCAACTCTGACCCGACATTTTGAGTCCGTCTTATTCTCTAGGCTACAAGGAAGACTTAGTGACATGAGGATGAAGTTTAGACGCTGCGGAGTCCCGGGTCGGTTTAGCCAAGAAACGATTCAAGGGCGGACCACGTGGACGATACGGGCGCACGCTCGCTTATTCGGGATTCTACTCTAGATGCGACAGCAGACTTGCAAAACCAACTGGCCAGTTTTTGGATAGGAGTTGATATCTATCTCCTGTGGCTACACATATTGCATTCACGGGGCCATGCACAAAATAGAAGTCTTGTATACGTAACCCCACTTCAGACCTCGGCCAAATCGCTGCGTTCTTACAATGCGATTGAATTCGACTTCATGTAGGACCCCGATAGATATGTTACAACAGACTAAATTGCGCACGAGTTCGGAGAGATTCCGAGGGTGTATAGAACCGCGTAGGCTTCCTGGTGGCGTGCCGATAAGTTCGAGCGCCCTAACTCCAAGCAGCTGTCTCACTATCATGACTGCTGGTGATCGTAACTCTACAACGAGTAAAAAATTTCTCCTCATTGACCCGTTGGTCACACTTTTCTTATACGGGAAACGGCCTCGGTATTAGAGACTTCTCGGCCGCTATTACCGCCTAGCGCTCATAATCTCATCGAGGCATGTCGTAGCCTCCAGGGTCCGCCATGCGGTGGCCCAGATTGGGCTTAGGCTCACAGTCAAGAAACGAATCAACCAATCTTCGTCCTTCAGCGACTCTATCGGCGCAGCACCCAAGGATGGGTCATTTGCCTTTGGCTTCTCTGACTGGAACCCGATTGCGAATTTCAATAAGCGGCTTTACATTGCTGTCCTCCAGATGCCTACACTAGTTCATGAACTAGGACCTTGACTTCAGTGGTCCGTGCTGTAGCATTCTGTCGCTTATTTGTACGGAAATGACCCCCGTCATCGAGGTGCTTTTCGTAAGCCTGGGAGCCCGTTGGGAGAGGTCTATTAAAAAGAGGCGATTCTCCCTTGACAGAAGCCATTCCGGACGAGGCTTGAGGATCGGGCATATGCGTTATGGCAAGGTCTACGTACATAGAATCAAGCGAGGACGGTATTGCGCATACAGAGCCTCATTCACTCTCAATTAGGCCCGTGTACTCTATAAATAATACCAATATCTGGTTTCGCTACAGAGGCTGTCGACACTCTACTGCGCCTAGGCGCGGACATCAACTCTCAAAGATTGATTCATCTGGGATTGGATAATTAAAGTGCGACTCCCATCCTTGGGGCCCGGTTGTGTAACTGTCACATAGGTTTCGGCGAGGTGCTCCATCGCTACTGCATGTACGGGGATATTGATGATAACACGCAGATTTTATTCCGTTGTATCGGCTTCTAAGGGTGAGGTATGCTGTAGCAATCTCAATCGTATATACCTCTGAATAGTGTACCCTGATTTGAATCTACGTGCTGGATTGGTCCTGTGCTGCGGATGCCGATTATCTATTACACAAGGATGAGGACTGGCTAATTAGGTTTTTGCTGGATATATAGCGTTCGCGGAGCTTCCCTTCGCACCGCAGTAGAAGTACAATAGGTAGTGTTGCGTTAGCATTACTTAGGGATCAAAAAGGACGAGGATTGGCTGATTAGATTTCTTTACGCGTTTGTCGGGAGTCGTTGTCGAGGGTTGAAATAACCAGCCGCGTCGATAGTTCAAAAGACCTCTGTTCAAAGTCCCTAAAATAGATTGTATTGTCGCGACACCACTCACCAAGTCAGGGAATCAACGATCATCTAAACAATCCTTCGGCTCTGCGGTAAAACGTAATCGGAAGAAGCAACAGAACAAGAGCGGCCATTTAATATAGGGTCGTTGGAAGGAACACAACCATCTTTGATTTTGGCCATCTGGATCCAGGAACGTGCGGCAGCTATACGATCCCAGCTGCCGTCGCCTCGTGGGTCACAAGGCCGACCAGCGTTGCAGCCAAACGCTGCAGGGAGAACATCGGTAGTAATGATCCAACCGTTCGTGATGGTTTGGGGACTTGCGTATGGCACTCCTCATTTTAACTAACCTGAGCATCCAGAACGGAGAAATATCAGTTGTACTCTGGCACGCCTAGACAGGCTTTTGGGACATAACTAGATCCTTTATTTGCCTATCGTGCCATCAGATGGCTTGTGGACAATGTCCGTGCAACCAAATTCCTAGTGTACTCACTCAGTGGCAACAGCAAGTCTAGCGTGGGTTTATGTGTTTTAGGTAGCCTTTTAACCTAAGTTTCCCGCGATTTCGCCCTCAGGCAAGTCCGTGAGACCGCATTCGATACTAGGTCTGATAGATACGCACCGCTACGAGAGATGGTGTTGACAACGCGAATGTGTGACAGGCTATCTCCTCACATGGATACTTCTTCTAGGTGATACGAAGTAGAGGACTGGATCGCACTGTATCTTATGTGAGTACCCAGAGGGGTTAAGCGAGGGATACAGCCCATAACTCCGCCAGTAAGCCGAATGACATGCGCGGTGAACGTGAAGTGCCACCGTAATTTAGTGCCTGGAGGGATTAGTGTACACTGGGCCACCGTCTATGCTGTGTACGGGGAGGAGCGAGTACGCGCTCAAACTCGCCAGGATGTTCGGGACGGCTCCTACAACTGTCCCCAAGCCGGATAACACACTCGGTGCAAGAACCGAATCAGCCAATCCTCGTCTTTGAAAAGCTACCAACCTTTGAATGAAGGATCCATGCGCAGCTTACGCTTGACACTGTTCCGAAGTCTCACATATCAGTTACCCAAATGCATTGCGAACTTTGTTTTATTACGCGGTGCGCACAACGGCGTAATCTGTGGCTAGGGCGGACAATAGCGCGTCTCAGCGTGATATCACCTGGCCTTTCATCGCGGTGACGACCCCCCTCTAGCGCCACGTTTAGCTGTTAAGGGCCCCACACAGCGTCTGTGCTCTTATATTGTCCGGCCAAAATACCGCACATCATAGCTAAACTCTTTGTGCTTAAGAGTGTAACGACGTGCATGAAAGTAGCTTGTCGGTTAACAGGAGGCTGCTCATTAGGCTTCAGTGATAACAAGCACGCCGCCGATCACCTCTGCCTCAGTGCACGTTCGCGAAGTTTATACCTACGATAGCGGTGGGCCTGAAACTAATTAGGTACAGTTGAAGGAGCTGGACCTTCCGGGTCACACAGAGCGTTATAAAAGAGGCCCGAAAACATCGGAACTATTGTTAGAGATATAAAGACGAAGACTGGCTAAAAGGATGAAGACTGGCTAATTCGATTTCTTCGGGTATTTGACTTAAGCGATCCACCCTTACTATTAATTCCAACCTATTCCCAATTGATCTCCCACAGTAGGGGTCCTAGCTTCTCGCAGGCCTCTCGATGAATTCACTAGACGCATCAGGACATCCACCCTACGATTTGCACGCGATTGCATTGTCCAGGGATGAGCCAAATAGTGGTAGGATGTGCCATTTGGTCGTACGCTGTCTCCGCACCAGCTCGTCCTTGATGAGTGCGCTTCCATCTGTCGTGGAGAGAAGGCGGAATCCAGATATAGGCGACGCATAAGAGGGGCTGTAAGGGCTCCGGTGTGTCAATCGACTTAAACGCGTGCCCCACGAATACCTAACTTGAGCTCAGTCGACATCCGTTCACTATACTAGCACTAGTAATGCAAAGCTATTACGTACAAAAATCTTACCGAAAACCCATAGCAAAGTCAAACACTGAGAGGGCCTAGGCGTATGGGCAGTGTGGTGGGTAGATCCCGAGGGAATGTATCAGGTCGGAGTTTAGCTGAATAATCCTCACGTGCCCATCACTCAATACCTAACAAGTGGCACCCTTGCTCTGATGGGCAATCAAACAGGTAGTTCTGCAGTCTTGGGAACTAGAGTTGTTTGGAAGAGAGCTGTGAGCACTACGCTACGTCTAGTTCCCCCATGGTAGCTAATCGGAGGGTCCGGAGTGAAGATTGACTCAGACTATCATCACCAATAGAGCGGTACGTCACTCCCCGGTCTTTGAGAGCTTTAATGAAGGAATCGGCTTGTACACTAGCGGGGGTAGAAACCGATACCCTTGGTGCGTAGTCTGGGGTAAGGGTGAGGACGTTCGCTCACGTGCAATTGTTTAGAGGTCGATCGCGCGATGAGTCGAGTCCCACATCCCTGGATTCTAGAAGGACGAAGACTGGTTGATACGGTTTTTGTCCCCCCACCTCTATTACTTACGAATACGTTTTGCCGCCTGGAGTGGCCTCTGATCAAGGCCGTTCTGTAAACTTATCAAGAACCTAATAAGCCAGTCTTCATCTTTACGACGCCCGTTGCGCGATAGAATCGCAAGACCCACCGACAAAACGGGGGCTTACTGATTCTCCAGCTTTGGAACGGAGCGTATCGGGCGTAACGGAGTCTTGGCCTATTTATATTGGCTTGATCTACATTTGTAGCGACCCGAAGAATCATGTACCGCATTCTAATAGACCCATACCTGGTCTCCGACTCACAGTTAACCGCACTGTATGTATACCACCTCTGGTGGGTTCGAATCTCGCTGAATGATATTATGGAAATTGAGAGTAATGCGCCATATGTTTGAGTACTGGGCAATAGATTGGTGTGATAGTACCAAGGTGGACTGGCTTACGCTGAAGGAATGCTGAAGTCGTAGATCGTGAGGTCGGTCTGTAGAGATTACAGTATCGCCACCCGTTGGCACCAGACGGATATGTGCAAAGATACCATACCTACAAACATGCCCAATGGAGGCCATCGTAGAAGCGATGGACTACCTGCTGCCATCAGGTCCTTTTCCAGCGCGACGAACCTACAGCTAGTAAGGAAGGGGGTCGGTCCTATTCCTCCTGGTAGGATGAGGCGAGCGAGACGTTATCACCTAGTGGGTATTCGGCTCTACTACTGACGGGATACCCATCAATGGGACTGACGTTATTGAAAGTTGTGACTCGAGAAAACCTGATCATTGTGCAAAGACGAAGACTGGCTAATTAGGTTCCTCCCAGAACGTACGGAAACTTCTCATTTTCCCGTCGATTTAACCCTCTCCAGAAGCCGTCTGAGCTACCTAACAGAGTCAGGCGCGGTCGCTCATGTTGCTACCTTTTTAAAAATGATCAAAAAGACTCAACAGATGCTGAACTAAAGACGAAGATTGGCTTATTCGGTTTCTCCCCATGACGAATTAATTTCATCAGAATAGACATCGTCTAGAGTATCACACCGGTGATCCGCTAGGCGATTGGAGTGCCAACATCTTATTCAGTGTATGTAATTGTGCAGTGTACGCAGATTTTGGCTCACCCCGACAGTCATCCCTAAGGGATTTAGAGTTCATAGGACTCAGGCTCAAGCCATTATGTGCCGACGGGATCTCTCCAGAATAAACGACCGTCTTATGTTACGTCTCTTATCCAGTCATGACTTTCCCGTTCTGAGGAACCTATGAACAACTGGGCACAGTCTGGGTTCTAACTGTCCTCTCACCCACGTTAGCGCCGTCGTTGATTAATCCCCCACGAGATGGAACTGAAACACAGCACAACCTAGAAAACGGATCAGCCAATCTTCATCTTTGATGGAATGCTCGGGGAATCTTGGGATTAGCCCAGCTAATAACCTAACACCACAGAGCCTAGAACAGTGCGTCGGAAAATAGCTCCCGTACAAGTCCAAGTGATGTGTCACGGACCTGGGCCGCATAGTGGTTACGATAGGGTATGGGACGCAAAGCAGAACCTCGCTTAGCATAAGCCGATCGGGATACCCGAGCACGCTGGATGATCCGCTTCTGACCCGTGACTCCTCGATGTTCATCCTGGGCCTATGAGTGACGTCCGCGCTATACTCGGAGATAGAGATGAGTGCGCTCCATTGACTAAAGTGGTTGCCCATAAAGCTCGACGTAAGTTTGTGGATGTTCATCTATGCGCAACAGCTCATCAGGCCTGCAGTGTTAGCCCACGGAAACTTTAGAAATCTCTGCGCGTGTCCCGCGTGCTTCCACTATACAGTCGGGATTTGAGGGTCAGCAGACACCCGTCACCACTTAGAGTGGGACTTAATATAGGGTATTGGTGTTTCACGATTACAAAATCTTTGGCAACTCATTCCACCAGGCGGACGCAGGTCTACATGTCTGAACTAGCATCATCAGCTCTGAAAACCGGAGGGATTTGCATGCACTTCGGCAGTGTAATGAGGACAGCCCAGCGAAGTTATCGAAGCCGGTTTCATTGCGCTAGATGGGTCCCCTCTGGCAAAGGGACCCCTGGTTCTTGTGTGCGTTTTCGGCTTCTTGTGTGATACTTAGAAATCGAATCAACCAATCTTCATCCTTATATAAGCCCCGATTCGGCGGCGCTTATGGACCCGAAAGACGAAGACTGGCTAATAAGGTTCCTGGGCACCCGTTACTTTATCTATTCCATCATCCCGTTGTGACGCGCACGATTCGCAGTTTGATTACCCACGGGGGTCATTACTCCTCGTTAATCTTAGTCACGGGGGGACAAGCAGGCCTTCCGGCCTCGAACCGGTGTTAAAACGCAAACGACACGTGACCTCTGGACCTCTGATCGCAGCCACCACCTAGCCGGCTATCCTCGGCGTGTTCTACT"
    peptide = "VKLFPWFNQY"
    #rna = "CCAAGUACAGAGAUUAAC"
    #rna = "CCGAGGACCGAAAUCAAC"
    #rna = "CCUCGUACAGAAAUCAAC"
    #rna = "CCAAGAACAGAUAUCAAU"
    #rna = "CCAAGAACAGAUAUCAAU"
    rna = "CCACGUACUGAAAUUAAC"
    print(ProteinTranslation(rna))
    '''count = 0
    lines = open("bacillus_brevis.txt", "r").readlines()
    n = len(lines)
    for i in range(n):
        pattern = lines[i][:-1]
        res = PeptideEncoding(pattern, peptide)
        count += len(res)
    print(count)'''
    pass
